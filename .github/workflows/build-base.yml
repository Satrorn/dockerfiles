# 利用GitHub Action自动构建多框架的docker镜像
# 变量设置(自动-手动)：${{ env.PROJECT }} = ${{ github.event.inputs.project }}
# 变量设置(自动-手动)：${{ env.TAGS }} = ${{ github.event.inputs.tag }}
name: 构建镜像：∞✘♥✔

# 设置触发条件
on:
# 手动触发工作流
  workflow_dispatch:
    inputs:
      project:
        description: 'project'
        required: true
      # 定时请填写default参数
        default: ''
      tag:
        description: 'tag'
        required: true
      # 定时请填写default参数
        default: 'latest'

# 仓库触发工作流
#  repository_dispatch:

env: ## 镜像名，也是git仓库中的文件夹名 
  IMAGE_NAME: ${{ github.event.inputs.project }} ## Dockerfile文件名称，在这里修改 
  DOCKERFILE_NAME: Dockerfile

# 编辑文件触发开始编译
# master分支的push操作会触发当前脚本的执行
#  push:
#    branches: [ master ]
#    paths:
#      - 'Dockerfile'
#      - '.github/workflows/build-release.yml'

# master分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ master ]

# 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
#  schedule:
#    - cron: '0 16 * * *'

# 点击star时开始任务
#  watch:
#    types: started

 # 任务集
jobs:
  build:
    # 选择虚拟环境
    runs-on: ubuntu-latest
    name: 基本信息
    
    # 自动编译单个镜像名称和版本(只设置一次)(PROJECT为必设)
    env:
      PROJECT: clash
      TAGS: latest
  
    # 运行步骤
    steps:
      # 检出master分支
      - name: 出各个模块代码
        uses: actions/checkout@v3

      - name: 安装 QEMU
        uses: docker/setup-qemu-action@v2

      - name: 安装 docker buildx
        uses: docker/setup-buildx-action@v2

      - name: 获取日期
        id: tag
        # 项目自动和手动切换处
        run: |
          if [[ -n $(cat ${{ env.IMAGE_NAME }}/Dockerfile | awk '{if($1~"ENV" && $2=="VERSION")print $3}') ]]; then
            VERSION=$(cat ${{ env.IMAGE_NAME }}/Dockerfile | awk '{if($1~"ENV" && $2=="VERSION")print $3}')
            echo "tag=$VERSION" >> $GITHUB_ENV
          else
            echo "tag=$(date +%Y)$(date +%m)$(date +%d)" >> $GITHUB_ENV
          fi

      - name: 版本分类
        id: prepare
        # IMAGE_NAME ：镜像名称
        # ALI_ADD ：阿里镜像地址
        # TIME_VERSION ：日期版本
        # DOCKERHUB_VERSION ：镜像版本
        # TAG_VERSION ：标签版本
        # TAG_LATEST ： 最新版本
        # ALI_VERSION ：
        # ALI_LATEST ：
        # AUTO_UPDATE_TAG ：
        # AUTO_UPDATE_ALI ：
        # 项目自动和手动切换处
        run: |
          IMAGE_NAME=${{ github.event.inputs.project }}
          ALI_ADD=registry.cn-shenzhen.aliyuncs.com
          
          DOCKERHUB_VERSION=${{ github.event.inputs.tag }}
          TIME_VERSION=${{ env.tag }}

          TAG_VERSION="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${DOCKERHUB_VERSION}"
          TAG_LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"

          ALI_VERSION="${ALI_ADD}/${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${DOCKERHUB_VERSION}"
          ALI_LATEST="${ALI_ADD}/${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"

          AUTO_UPDATE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TIME_VERSION}"
          AUTO_UPDATE_ALI="${ALI_ADD}/${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${TIME_VERSION}"

          echo "time_version=${TIME_VERSION}" >> $GITHUB_OUTPUT
          echo "dockerhub_version=${DOCKERHUB_VERSION}" >> $GITHUB_OUTPUT

          echo "tag_version=${TAG_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_latest=${TAG_LATEST}" >> $GITHUB_OUTPUT

          echo "ali_version=${ALI_VERSION}" >> $GITHUB_OUTPUT
          echo "ali_latest=${ALI_LATEST}" >> $GITHUB_OUTPUT

          echo "auto_update_tag=${AUTO_UPDATE_TAG}" >> $GITHUB_OUTPUT
          echo "auto_update_ali=${AUTO_UPDATE_ALI}" >> $GITHUB_OUTPUT
          
      # 登录到DOCKERHUB
      - name: 登陆DOCKERHUB
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.PASSWORD }}

      # 登录到阿里镜像仓库
      - name: 登陆ALIYUN
        run: |
          docker login -u ${{ secrets.ALIYUN_USERNAME }} -p ${{ secrets.PASSWORD }} registry.cn-shenzhen.aliyuncs.com

      # 构建Amd64和Arm64的镜像
      - name: 构建和推送
        uses: docker/build-push-action@v3
        with:
          # 项目自动和手动切换处
          context: ${{ env.IMAGE_NAME }}
          file: ${{ env.IMAGE_NAME }}/${{ env.DOCKERFILE_NAME }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.prepare.outputs.tag_version }}
            ${{ steps.prepare.outputs.tag_latest }}
            ${{ steps.prepare.outputs.ali_version }}
            ${{ steps.prepare.outputs.ali_latest }}
            ${{ steps.prepare.outputs.auto_update_tag }}
            ${{ steps.prepare.outputs.auto_update_ali }}
            
      # 同步简介
      - name: README.md
        uses: ms-jpq/sync-dockerhub-readme@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.PASSWORD }}
          # 项目自动和手动切换处
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          # 项目自动和手动切换处
          readme: "${{ env.IMAGE_NAME }}/README.md"

      # 删除旧的工作流
      - name: Del
        uses: Mattraks/delete-workflow-runs@main
        with:
          repository: ${{ github.repository }}
          retain_days: 1
          # 保留多少个workflow不删除
          keep_minimum_runs: 1
